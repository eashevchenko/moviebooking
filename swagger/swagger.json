{
  "swagger": "2.0",
  "info": {
    "description": "This is API of movie booking service",
    "version": "0.1.0",
    "title": "Movie booking API"
  },
  "tags": [
    {
      "name": "cinemas",
      "description": "Access to Petstore orders"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/cinemas": {
      "get": {
        "tags": [
          "cinema"
        ],
        "summary": "Get all cinemas",
        "description": "",
        "operationId": "getCinemas",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "cinema"
        ],
        "summary": "Create new cinema",
        "description": "",
        "operationId": "createCinema",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Cinema object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cinema"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "405": {
            "description": "Validation exception"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/cinemas/list": {
      "get": {
        "tags": [
          "cinema"
        ],
        "summary": "Finds Cinemas by pagination",
        "description": "",
        "operationId": "getCinemasByPagination",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "page number",
            "required": false,
            "type": "string",
            "default": "1"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of cinemas",
            "required": false,
            "type": "string",
            "default": "3"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "order list of cinemas",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Cinema"
              }
            }
          }
        }
      }
    },
    "/cinemas/{id}": {
      "get": {
        "tags": [
          "cinema"
        ],
        "summary": "Find cinema by ID",
        "description": "Returns a single cinema",
        "operationId": "getCinemaById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of cinema to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Cinema"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Cinema not found"
          }
        }
      },
      "delete": {
        "tags": [
          "cinema"
        ],
        "summary": "Deletes a cinema",
        "description": "",
        "operationId": "removeCinema",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Cinema id to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Cinema not found"
          }
        }
      }
    },
    "/cinemas/{id}/halls": {
      "get": {
        "tags": [
          "cinema"
        ],
        "summary": "Find halls by  cinema ID",
        "description": "Returns array of halls",
        "operationId": "getCinemaHalls",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of cinema to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Hall"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Cinema not found"
          }
        }
      }
    },
    "/cinemas/{id}/movies/{from}": {
      "get": {
        "tags": [
          "cinema"
        ],
        "summary": "Find all Movies in cinema by concrete date",
        "description": "Returns array of showTimes and movies",
        "operationId": "getCinemaMoviesByDate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of cinema to return",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "path",
            "description": "Query date in {YYYY-MM-DD} format",
            "required": true,
            "type": "date",
            "default": "2017-07-04"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Hall"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Cinema not found"
          }
        }
      }
    },
    "/halls": {
      "get": {
        "tags": [
          "hall"
        ],
        "summary": "Get all halls",
        "description": "",
        "operationId": "getHalls",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/halls/list": {
      "get": {
        "tags": [
          "hall"
        ],
        "summary": "Finds Halls by pagination",
        "description": "",
        "operationId": "getHallsByPagination",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "page number",
            "required": false,
            "type": "string",
            "default": "1"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of cinemas",
            "required": false,
            "type": "string",
            "default": "3"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "order list of halls",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Hall"
              }
            }
          }
        }
      }
    },
    "/halls/{id}": {
      "get": {
        "tags": [
          "hall"
        ],
        "summary": "Find hall by ID",
        "description": "Returns a single hall",
        "operationId": "getHallById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of hall to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Hall"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Hall not found"
          }
        }
      },
      "post": {
        "tags": [
          "hall"
        ],
        "summary": "Create new hall by cinema",
        "description": "",
        "operationId": "createHallByCinema",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of cinema to return",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Hall object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Hall"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "405": {
            "description": "Validation exception"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/halls/{id}/cinema": {
      "get": {
        "tags": [
          "hall"
        ],
        "summary": "Get cinema by hall",
        "description": "",
        "operationId": "getHallCinema",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of hall to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/movies": {
      "get": {
        "tags": [
          "movie"
        ],
        "summary": "Get movies",
        "description": "",
        "operationId": "getMovies",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "movie"
        ],
        "summary": "Create new movie",
        "description": "",
        "operationId": "createMovie",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Movie object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Movie"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "405": {
            "description": "Validation exception"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/movies/list": {
      "get": {
        "tags": [
          "movie"
        ],
        "summary": "Finds Movies by pagination",
        "description": "",
        "operationId": "getMoviesByPagination",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "page number",
            "required": false,
            "type": "string",
            "default": "1"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of movies",
            "required": false,
            "type": "string",
            "default": "3"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "order list of movies",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Movie"
              }
            }
          }
        }
      }
    },
    "/movies/{id}": {
      "get": {
        "tags": [
          "movie"
        ],
        "summary": "Find movie by ID",
        "description": "Returns a single movie",
        "operationId": "getMovieById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of movie to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Movie"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Movie not found"
          }
        }
      },
      "put": {
        "tags": [
          "movie"
        ],
        "summary": "Update movie by id",
        "description": "",
        "operationId": "updateMovie",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Movie object that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Movie"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "delete": {
        "tags": [
          "movie"
        ],
        "summary": "Deletes a movie",
        "description": "",
        "operationId": "removeMovie",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Movie id to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Movie not found"
          }
        }
      }
    },
    "/movies/{id}/showtimes": {
      "get": {
        "tags": [
          "movie"
        ],
        "summary": "Find showtimes by movie ID",
        "description": "Returns array of showTimes",
        "operationId": "getMovieShowTimes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of movie to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Movie"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Movie not found"
          }
        }
      }
    },
    "/showtimes": {
      "get": {
        "tags": [
          "showtime"
        ],
        "summary": "Get all showtimes",
        "description": "",
        "operationId": "getShowTimes",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/showtimes/list": {
      "get": {
        "tags": [
          "showtime"
        ],
        "summary": "Finds Showtimes by pagination",
        "description": "",
        "operationId": "getShowTimesByPagination",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "page number",
            "required": false,
            "type": "string",
            "default": "1"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of showtimes",
            "required": false,
            "type": "string",
            "default": "3"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "order list of showtimes",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Cinema"
              }
            }
          }
        }
      }
    },
    "/showtimes/{id}": {
      "get": {
        "tags": [
          "showtime"
        ],
        "summary": "Find showtime by ID",
        "description": "Returns a single showtime",
        "operationId": "getShowTimeById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of showtime to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Movie"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ShowTime not found"
          }
        }
      },
      "post": {
        "tags": [
          "showtime"
        ],
        "summary": "Create new showtime according to movie",
        "description": "",
        "operationId": "createShowTime",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of hall to create showtime",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "ShowTime object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShowTimeToCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "405": {
            "description": "Validation exception"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get all users",
        "description": "",
        "operationId": "getUsers",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create new user",
        "description": "",
        "operationId": "createUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "405": {
            "description": "Validation exception"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/users/list": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Finds users by pagination",
        "description": "",
        "operationId": "getUsersByPagination",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "page number",
            "required": false,
            "type": "string",
            "default": "1"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit of users",
            "required": false,
            "type": "string",
            "default": "3"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "order list of users",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Cinema"
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Find user by ID",
        "description": "Returns a single user",
        "operationId": "getUserById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update user",
        "description": "",
        "operationId": "updateUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user to update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "User object that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "405": {
            "description": "Validation exception"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Deletes a user",
        "description": "",
        "operationId": "removeUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "definitions": {
    "Cinema": {
      "type": "object",
      "required": [
        "title"
      ],
      "properties": {
        "title": {
          "type": "string",
          "example": "New cinema"
        },
        "address": {
          "type": "string",
          "example": "Simple address"
        }
      }
    },
    "Hall": {
      "type": "object",
      "required": [
        "title",
        "places"
      ],
      "properties": {
        "title": {
          "type": "string",
          "example": "New Hall"
        },
        "places": {
          "type": "number",
          "example": 40
        }
      }
    },
    "Movie": {
      "type": "object",
      "required": [
        "title"
      ],
      "properties": {
        "title": {
          "type": "string",
          "example": "Jurassic Park"
        },
        "description": {
          "type": "string",
          "example": "fantastic film"
        },
        "director": {
          "type": "string",
          "example": "Steven Spielberg"
        },
        "timeDuration": {
          "type": "number",
          "example": "15000"
        }
      }
    },
    "ShowTime": {
      "type": "object",
      "properties": {
        "start": {
          "type": "date",
          "example": "2017-07-04"
        }
      }
    },
    "ShowTimeToCreate": {
      "type": "object",
      "properties": {
        "start": {
          "type": "date",
          "example": "2017-07-07T09:12:07.015Z"
        },
        "movieId": {
          "type": "string",
          "example": "595b5cf0ebd87e67c227444c"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "example": "John"
        },
        "lastName": {
          "type": "string",
          "example": "Smith"
        },
        "password": {
          "type": "password",
          "example": "user"
        },
        "phoneNumber": {
          "type": "string",
          "example": "+38012345"
        }
      }
    }
  }
}